# Playbook to setup dex
# Playbook is built around Ubuntu 14.04
# This playbook assumes you have already created the directory named in the project_directory variable and cloned the dex.deploy repo into it
# The default value is /dex 
# It also assumes that you have copied the dex.war and SSL cert pieces to the same directory as the playbook
# It is recommended to reboot when this completes
---
- hosts: localhost
  vars:
###########################################################
# Edit these variables as needed
    # this is the project directory in which the dex.deploy repo is checked out into
    project_directory: /dex 
    # this should be named according to the DEx WAR file. This will be used to copy the dex WAR file to the correct location for running
    dex_war: dex.war
    # this should be the email address of the server admin. It will be used in the Apache configuration
    admin_email: admin@nowhere.com
    # The default password for the postgres user for Postgresql will be set to this value
    pg_password: reallyinsecurepasswordchangeme!
    # next line needs to be in CIDR notation - used for various access restrictions (including Postgresql, Apache...)
    local_subnet: xxx.xxx.xxx.0/24
    # it is unlikely that you will need to change the Docker values
    # next line needs to be in CIDR notation
    docker_bridge_ip: 172.22.22.1/24
    # next line needs to be in CIDR notation - used for various access restrictions (including Postgresql, Apache...)
    docker_subnet: 172.22.22.0/24
    # set this to the host name for this host - used in Apache config
    host_name: dexweb
    # set this to the DNS suffix of this host - used in Apache config
    dns_suffix: itercommunity.org
    # together the above 2 variables form the FQDN of this host - i.e. dex.test.com
    # set this to the filename of the SSL intermediate certificate
    ssl_intermediate: intermediate_cert_bundle.pem
    # set this to the filename of the SSL certificate
    ssl_cert: dex.test.com.cer
    # set this to the filename of the SSL key
    ssl_key: dex.test.com.key
    # set this to true to enable access to Solr admin - *NOT* recommended for production use - *ONLY* for debugging!
    solr_public: false
    # set this to false to disable SSL - Note that this is *NOT* recommended
    ssl_enabled: true
# probably don't need to edit below this line
##############################################################    
    # These are the paths for the docker container files - it is unlikely that you will need to change them
    container_directories:
    - /tomcat/solr/logs
    - /tomcat/solr/webapps
    - /tomcat/dex/logs
    - /tomcat/dex/webapps
    # these next 2 have to do with Apache config - it is unlikely that you will need to change them
    symlinks:
      default:
        src: "{{ project_directory }}/serverconf/etc/apache2/default.conf.j2"
        dest: /etc/apache2/sites-available/default.conf
      default-ssl:
        src: "{{ project_directory }}/serverconf/etc/apache2/default-ssl.conf.j2"
        dest: /etc/apache2/sites-available/default-ssl.conf
    config_setup_apachehosts:
      default:
        vhost: default
        path: /etc/apache2/sites-enabled/default.conf
      default-ssl:
        vhost: default-ssl
        path: /etc/apache2/sites-enabled/default-ssl.conf        
# don't edit below this line
###########################################################        
  tasks:
# initial steps that apply to Ubuntu hosts  
  - block:
    - name: install ansible support packages on Debian or Ubuntu
      apt: name="{{ item }}" state=present
      with_items:
      - python-pip
      - python-software-properties
      - python-apt
      - python-pycurl
      - python-yaml
      - python-jinja2
      - python-setuptools
      # steps that apply to all Ubuntu hosts
    - name: install git and other useful tools 
      apt: name="{{ item }}" state=present
      with_items:
        - htop
        - git 
        - ncdu
    tags: 
      - common
      - ubuntu
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  
# install Postgresql 9.5
  - block: 
    - name: install apt key for postgresql repository but only if not already present
      apt_key: url=http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc state=present
      tags: postgresql
    - name: Add Postgresql repository
      apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main' update_cache=yes state=present
      tags: postgresql
    - name: install postgresql, postgresql-contrib (additional functions), postgresql-plpython and (libpq-dev, python-psycopg2 - ansible dependencies for managing postgresql)
      apt: pkg="{{ item }}" state=present
      with_items:
        - postgresql-9.5
        - libpq-dev
        - python-psycopg2
        - postgresql-contrib-9.5
        - postgresql-plpython-9.5
      ignore_errors: yes
      register: postgresql_installed
    - name: update pg_hba.conf to allow pg_admin access from local subnet
      template: src="{{ project_directory }}/serverconf/etc/postgresql/pg_hba.conf.j2" dest="/etc/postgresql/9.5/main/pg_hba.conf" mode=0640 owner=postgres group=postgres force=yes
    - name: fix postgresql access permissions
      lineinfile: dest=/etc/postgresql/9.5/main/postgresql.conf regexp="^\#(listen_addresses\s\=\s\')(.*)(\'.*)" line='\1*\3' backrefs=yes
    - name: update firewall settings to allow pgadmin from our subnet
      ufw: rule=allow proto=tcp from_ip="{{ local_subnet }}" to_port=5432  
    - name: set postgres password to supplied value
      become_user: postgres
      become: yes
      postgresql_user: user=postgres password="{{ pg_password }}"
      when: postgresql_installed.changed
    - name: Create the database
      postgresql_db: name="dex" login_user=postgres login_password="{{ pg_password }}" login_host=localhost owner="postgres" state=present
    - name: Restore db schema - really only useful on first run
      shell: /usr/bin/psql -U postgres -d dex < {{ project_directory }}/releng/ansible/dex-schema.dump
      become_user: postgres
      become: yes
      ignore_errors: yes  
    tags: postgresql
    
# install SSL Certificate files on a server
  - block:
    - name: copy SSL certificate file
      #get_url: url="{{ ssl_cert }}" dest="/etc/ssl/certs/" mode=0644
      copy: remote_src=yes src="{{ ssl_cert }}" dest="/etc/ssl/certs/" mode=0644
    - name: copy SSL intermediate chain file
      #get_url: url="{{ ssl_intermediate }}" dest="/etc/ssl/certs/" mode=0644
      copy: remote_src=yes src="{{ ssl_intermediate }}" dest="/etc/ssl/certs/" mode=0644
    - name: copy SSL key file
      #get_url: url="{{ ssl_key }}" dest="/etc/ssl/private/" mode=0640 group=ssl-cert
      copy: remote_src=yes src="{{ ssl_key }}" dest="/etc/ssl/private/" mode=0640 group=ssl-cert 
    when: ssl_enabled == true
    ignore_errors: yes
    tags: ssl_cert
    
# Install Apache 2.4    
  - block:
    - name: install apache2 - web server of choice
      apt: pkg=apache2 state=present
    - name: install mod_rewrite
      apache2_module: name=rewrite state=present
    - name: Change ServerTokens setting to Production for 14.04
      lineinfile: dest=/etc/apache2/conf-available/security.conf regexp='^(ServerTokens\s)OS' line='\1Prod' backrefs=yes
    - name: Change ServerSignature setting to Off for 14.04
      lineinfile: dest=/etc/apache2/conf-available/security.conf regexp='^(ServerSignature\s)On' line='\1Off' backrefs=yes 
    - name: install mod_proxy_html for Apache
      apt: pkg=libapache2-mod-proxy-html state=present
    - name: install SSL support
      apache2_module: name=ssl state=present
    - name: install proxy module
      apache2_module: name=proxy state=present
    - name: install ajp proxy handler
      apache2_module: name=proxy_ajp state=present
    - name: install http proxy handler
      apache2_module: name=proxy_http state=present
    - name: install html proxy handler
      apache2_module: name=proxy_html state=present
    - name: install headers module
      apache2_module: name=headers state=present
    - name: enable the ssl site in apache in 14.04
      command: /usr/sbin/a2ensite default-ssl creates=/etc/apache2/sites-enabled/default-ssl.conf 
      when: ssl_enabled == true
    tags: webserver

# install Docker
  - block:
    - name: set docker filename
      set_fact: docker_filename="docker"
    - name: Add Docker repository key
      apt_key: url="https://apt.dockerproject.org/gpg"
    - name: Add Docker repository for 14.04
      apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' update_cache=yes
      when: ansible_distribution_release == "trusty"
    - name: install docker
      apt: pkg=docker-engine state=present
      register: docker_installed
    - name: enable UFW forwarding for docker
      lineinfile: dest=/etc/default/ufw regexp='(DEFAULT_FORWARD_POLICY=\")(DROP)(\")' line='\1ACCEPT\3' backrefs=yes
#    - name: reload ufw rules for docker
#      ufw: state=reloaded
#      ignore_errors: yes
    - name: enable memory and swap accounting
      lineinfile: dest=/etc/default/grub regexp='^(GRUB_CMDLINE_LINUX=\")(.*)(\")' line='\1cgroup_enable=memory swapaccount=1\3' backrefs=yes
    - name: update grub
      command: /usr/sbin/update-grub
      when: docker_installed.changed
    - name: install dependency for ansible to manipulate docker
      pip: name={{ item }}
      ignore_errors: yes
      with_items:
      - docker-py
      - requests
    - name: check to see docker managed bridge is setup correctly
      shell: "/bin/grep -q bip={{ docker_bridge_ip }} /etc/default/{{ docker_filename }} && echo 'True' || echo 'False'"
      register: docker_bipset
      changed_when: docker_bipset.stdout=='False'
    - name: add docker managed bridge IP in /etc/default/{{ docker_filename }}
      lineinfile: dest=/etc/default/{{ docker_filename }} insertafter=EOF line='DOCKER_OPTS="--bip={{ docker_bridge_ip }}"'
      when: docker_bipset.stdout=='False'
      ignore_errors: yes
    - name: Add firewall exception for Postgresql access port to host from Docker
      ufw: rule=allow direction=in interface=docker0 proto=tcp src="{{ docker_subnet }}" to_port=5432
    tags: docker 
  
# setup configuration and directories for dex 
  - block:
    - name: create directories for containers 
      file: path="{{ item }}" state=directory
      with_items: container_directories
   # if this file exists, then we are running this for the first time
    - name: get stats on default config
      stat: path=/etc/apache2/sites-available/000-default.conf
      register: apache_default
      ignore_errors: yes
    - name: remove sites to prevent errors
      file: dest="{{ item }}" state=absent
      with_items:
      - /etc/apache2/sites-available/000-default.conf
      - /etc/apache2/sites-available/default-ssl.conf
      when: apache_default is defined and apache_default.stat.isreg == True
      ignore_errors: yes
    - name: remove symlinks to prevent errors
      file: dest="{{ item }}" state=absent
      with_items:
      - /etc/apache2/sites-enabled/000-default.conf
      - /etc/apache2/sites-enabled/default-ssl.conf
      when: apache_default is defined and apache_default.stat.isreg == True
      ignore_errors: yes      
    - name: install templated apache config
      #file: src="{{ item.value.src }}" dest="{{ item.value.dest }}" mode="{{ item.value.mode | default('0664') }}" force="{{ item.value.force | default('no') }}" state=link
      template: src="{{ item.value.src }}" dest="{{ item.value.dest }}" mode="{{ item.value.mode | default('0664') }}" force="{{ item.value.force | default('yes') }}"
      with_dict: "{{ symlinks }}"
      ignore_errors: yes
    - name: enable sites in Apache
      command: /usr/sbin/a2ensite {{ item.value.vhost }} creates={{ item.value.path }}
      with_dict: "{{ config_setup_apachehosts | default({}) }}"
      ignore_errors: yes
    - name: remove SSL site if disabled
      command: /usr/sbin/a2dissite default-ssl
      ignore_errors: yes
      when: ssl_enabled == false      
    tags: config_setup 

# copy dex WAR to correct location
  - block:
    - name: copy dex WAR to correct location
      copy: remote_src=yes src="{{ dex_war }}" dest="/tomcat/dex/webapps"
    ignore_errors: yes
    tags: copy_dex

# restart services
  - block:
    - name: restart Apache
      service: name=apache2 state=restarted
    - name: restart Postgresql
      service: name=postgresql state=restarted
    - name: stop docker
      service: name=docker state=stopped
    - name: delete old docker bridge
      command: ip link del docker0
    - name: start docker
      service: name=docker state=started
      ignore_errors: yes
    tags: restart_services
    
# pull docker images and start containers
  - block:
    - block:
      - name: build docker dex tomcat image
        docker_image: path="{{ project_directory }}/releng/docker/tomcat7" name="dex/tomcat7" state=present
        ignore_errors: yes
      - name: start dex container
        docker_container:
          name: dex
          image: dex/tomcat7
          published_ports:
          - "127.0.0.1:8080:8080"
          - "127.0.0.1:8009:8009"
          - "127.0.0.1:2323:2323"
          restart_policy: always
          volumes:
          - "/etc/localtime:/etc/localtime:ro"
          - "/etc/timezone:/etc/timezone:ro"
          - "/tomcat/dex/webapps:/usr/local/tomcat/webapps:rw"
          - "/tomcat/dex/logs:/usr/local/tomcat/logs:rw"
          - "{{ project_directory }}:/war-deployment/dex.deploy:rw"
          memory: 768MB
          env:
            tomcat_xmx: 768m
            tomcat_xms: 256m
            tomcat_maxpermsize: 256m
            tomcat_directories: /war-deployment/dex.deploy/data|/war-deployment/dex.deploy/xslt
      tags: dex_container

    - block:
      - name: build docker dex solr image
        docker_image: path="{{ project_directory }}/releng/docker/solr" name="dex/solr" rm=True state=present
        ignore_errors: yes
      - name: start solr container
        docker_container:
          name: solr
          image: dex/solr
          published_ports:
          - "127.0.0.1:8983:8983"
          restart_policy: always
          volumes:
          - "{{ project_directory }}/solr/extracts:/opt/solr/server/solr/extracts:rw"
          memory: 512MB
      tags: solr_container
    tags: launch_containers